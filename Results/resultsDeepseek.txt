----------------------------FULL PROGRAM----------------------------

event(0 .. N-1).

room(Room, Capacity).

timeslot(Timeslot, Day, Hour).

student(Student, Event).

feature_requirement(Feature, Event).

room_feature(Feature, Room).

precedence_constraint(Event1, Event2).

timeslot_constraint(Event, Timeslot).

% Generator


1 { assigned(Event, Timeslot, Room) : timeslot(Timeslot,_,_), room(Room,_) } 1 :- event(Event).
% Correct


% Hard Constraints

% Students must not have overlapping events.
:- assigned(Event1, Timeslot, Room1), assigned(Event2, Timeslot, Room2), student(Student, Event1), student(Student, Event2), Event1 != Event2.
%Correct

% The amount of students in a room at the same time should not exceed the capacity of the room
:- assigned(Event, Timeslot, Room), #count{Student : student(Student, Event)} > Capacity, room(Room, Capacity).
%:- room(Room, Capacity), timeslot(Timeslot, _, _),    #count{Student : student(Student, Event), assigned(Event, Timeslot, Room)} > Capacity.
%Check in paper: deepseeks sems to have it right.

% Rooms must have the required features for the event.
:- assigned(Event, _, Room), feature_requirement(Feature, Event), not room_feature(Feature, Room).
%Correct

% There must be no more than one event in a room at a time.
:- assigned(Event1, Timeslot, Room), assigned(Event2, Timeslot, Room), Event1 != Event2.
%Correct


% Events may only be scheduled in designated timeslots.
:- assigned(Event, Timeslot, _), not timeslot_constraint(Event, Timeslot).
%Correct


% Some events must be scheduled in a specific order.
:- assigned(Event1, Timeslot1, _), assigned(Event2, Timeslot2, _), precedence_constraint(Event1, Event2), Timeslot1 >= Timeslot2.
%Correct




% Soft Constraints

% Students should not have events scheduled in the last timeslot of the day
penalty("LastTimeslot",student(Student,Event),1) :- assigned(Event,Timeslot,_), timeslot(Timeslot,Day,Hour), Hour == 9, student(Student,Event).
%Correct


% Students should not have events scheduled in three or more consecutive timeslots
student_timeslot(Student,Timeslot) :- assigned(Event,Timeslot,Room), student(Student,Event).
consecutive_timeslots(Student,Timeslot) :- student_timeslot(Student,Timeslot), student_timeslot(Student,Timeslot+1), student_timeslot(Student,Timeslot+2).
penalty("NoThreeConsecutive",student(Student,_),1) :- consecutive_timeslots(Student,_).
%Correct


% Students should not have exactly one event in a day
student_event_count(Count, Student, Day) :- student(Student, _), timeslot(_, Day, _), #count{Event : assigned(Event, Timeslot, _), timeslot(Timeslot, Day, _), student(Student, Event)} = Count.
penalty("SingleEventDay", student_event_count(Count, Student, Day), 1) :- student_event_count(Count, Student, Day), Count == 1.
%-:45:1-88: error: unsafe variables in:  penalty("NoThreeConsecutive",student(Student,#Anon0),1):-[#inc_base];consecutive_timeslots(Student,#Anon1).
% -:45:46-47: note: '#Anon0' is unsafe



% Objective function
#minimize { Penalty,Reason,SoftConstraint : penalty(SoftConstraint,Reason,Penalty) }.

----------------------------FULL PROGRAM----------------------------

```
nurse(0 .. N_nurses-1).

day(0 .. N_days-1).

shift_type(Shift_type, Duration).

nurse_requirement(Shift, Min, Max).

work_requirement(Min, Max).

shift_requirement(Shift_type, Min, Max, Preferred).
```
%% shift_type might not wor
%% Weird numbering of days and nurses

% Generator

1 { assigned(Nurse, Shift, Day) : shift_type(Shift, _) } 1 :- nurse(Nurse), day(Day).
%Correct


% Hard Constraints

% Every day, the number of nurses assigned to each shift must be between the specified minimum and maximum
:- day(Day), shift_type(Shift, _), #count{Nurse : assigned(Nurse, Shift, Day)} < Min, nurse_requirement(Shift, Min, _).
:- day(Day), shift_type(Shift, _), #count{Nurse : assigned(Nurse, Shift, Day)} > Max, nurse_requirement(Shift, _, Max).
%Correct, but use of shift_type superfluous

% Each nurse must work at least the specified minimum and at most the specified maximum number of hours
:- nurse(Nurse), #sum{Duration, Shift, Day: assigned(Nurse, Shift, Day), shift_type(Shift, Duration)} < Min, work_requirement(Min, _).
:- nurse(Nurse), #sum{Duration, Shift, Day: assigned(Nurse, Shift, Day), shift_type(Shift, Duration)} > Max, work_requirement(_, Max).
%Correct

% Nurses must have exactly 30 days of vacation.
:- nurse(Nurse), #count{Day : assigned(Nurse, vacation, Day)} != 30.
%Correct

% If a nurse works a night shift, they can not work a morning or afternoon shift the next day
:- assigned(Nurse, night, Day), assigned(Nurse, morning, Day+1).
:- assigned(Nurse, night, Day), assigned(Nurse, afternoon, Day+1).
% Correct

% If a nurse works an afternoon shift, they cannot work a morning shift the next day.
:- assigned(Nurse, afternoon, Day), assigned(Nurse, morning, Day+1).
% Correct


% Each nurse has at least two ordinary rest days for every window of fourteen days
:- nurse(Nurse), day(Day), Day >= 13, #count{ D : assigned(Nurse, rest, D), D >= Day - 13, D <= Day } < 2.
%Wong

% Nurses working on two consecutive nights deserve one special_rest day in addition to the ordinary rest days
:- assigned(Nurse, night, Day), assigned(Nurse, night, Day+1), not assigned(Nurse, special_rest, Day+2).
%Correct

% The total number of hours worked by each nurse must be between the specified minimum and maximum
:- nurse(Nurse), #sum{Duration, Shift, Day: assigned(Nurse, Shift, Day), shift_type(Shift, Duration)} > Max, work_requirement(_, Max).
:- nurse(Nurse), #sum{Duration, Shift, Day: assigned(Nurse, Shift, Day), shift_type(Shift, Duration)} < Min, work_requirement(Min, _).
%Correct



% Soft Constraints

% Nurses work the preferred number of shifts for each shift type
shift_count(Count, Nurse, Shift) :- nurse(Nurse), shift_type(Shift, _), #count{Day : assigned(Nurse, Shift, Day)} = Count.
penalty("PreferredShifts",shift_count(Count, Nurse, Shift),(Preferred-Count)*1) :- shift_count(Count, Nurse, Shift), shift_requirement(Shift, _, _, Preferred), Count < Preferred.
penalty("PreferredShifts",shift_count(Count, Nurse, Shift),(Count-Preferred)*1) :- shift_count(Count, Nurse, Shift), shift_requirement(Shift, _, _, Preferred), Count > Preferred.
%Correct




% Objective function
#minimize { Penalty,Reason,SoftConstraint : penalty(SoftConstraint,Reason,Penalty) }.