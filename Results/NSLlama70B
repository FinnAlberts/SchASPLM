% Instance Template
nurse(Nurse).

day(0.. N_days-1).

shift_type(Shift_type, Duration).

nurse_requirement(Shift, Min, Max).

work_requirement(Min, Max).

shift_requirement(Shift_type, Min, Max, Preferred).

% Generator

1 { assigned(Nurse, Shift_type, Day) : shift_type(Shift_type, _), day(Day) } 1 :- nurse(Nurse), day(Day).
%Correct

% Hard Constraints

% Every day, the number of nurses assigned to each shift must be between the specified minimum and maximum
:- day(Day), shift_type(Shift_type, _), #count{Nurse : assigned(Nurse, Shift_type, Day)} < Min, nurse_requirement(Shift_type, Min, _).
:- day(Day), shift_type(Shift_type, _), #count{Nurse : assigned(Nurse, Shift_type, Day)} > Max, nurse_requirement(Shift_type, _, Max).


% Each nurse must work at least the specified minimum and at most the specified maximum number of hours
:- nurse(Nurse), #sum{Duration, Shift_type, Day: assigned(Nurse, Shift_type, Day), shift_type(Shift_type, Duration)} < Min, work_requirement(Min, _).
:- nurse(Nurse), #sum{Duration, Shift_type, Day: assigned(Nurse, Shift_type, Day), shift_type(Shift_type, Duration)} > Max, work_requirement(_, Max).


% Nurses must have exactly 30 days of vacation.
:- nurse(Nurse), #count{Day : assigned(Nurse, vacation, Day)}!= 30.


% If a nurse works a night shift, they can not work a morning or afternoon shift the next day
:- assigned(Nurse, night, Day), assigned(Nurse, morning, Day+1).
:- assigned(Nurse, night, Day), assigned(Nurse, afternoon, Day+1).


% If a nurse works an afternoon shift, they cannot work a morning shift the next day.
:- assigned(Nurse, morning, Day+1), assigned(Nurse, afternoon, Day).


% Each nurse has at least two ordinary rest days for every window of fourteen days
:- nurse(Nurse), day(Start), Start+14=End, #count{Day : day(Day), Day>=Start, Day<End, not assigned(Nurse, rest, Day)} < 2.
%% This rule does not work

% Nurses working on two consecutive nights deserve one special_rest day in addition to the ordinary rest days
:- assigned(Nurse, night, Day), assigned(Nurse, night, Day+1), not assigned(Nurse, special_rest, Day+2).


% The total number of hours worked by each nurse must be between the specified minimum and maximum
:- nurse(Nurse), #sum{Duration, Shift_type, Day : assigned(Nurse, Shift_type, Day), shift_type(Shift_type, Duration)} > Max, work_requirement(Min, Max).
:- nurse(Nurse), #sum{Duration, Shift_type, Day : assigned(Nurse, Shift_type, Day), shift_type(Shift_type, Duration)} < Min, work_requirement(Min, Max).


% Soft Constraints

% Nurses work the preferred number of shifts for each shift type
nurse_shift_count(Count, Nurse, ShiftType) :- nurse(Nurse), shift_type(ShiftType, _), #count{Day : assigned(Nurse, ShiftType, Day), day(Day)} = Count.
penalty("ShiftPreference",nurse_shift_count(Count, Nurse, ShiftType),(Preferred-Count)*1) :- nurse_shift_count(Count, Nurse, ShiftType), shift_requirement(ShiftType, _, _, Preferred), Count < Preferred.
penalty("ShiftPreference",nurse_shift_count(Count, Nurse, ShiftType),(Count-Preferred)*1) :- nurse_shift_count(Count, Nurse, ShiftType), shift_requirement(ShiftType, _, _, Preferred), Count > Preferred.


% Objective function
#minimize { Penalty,Reason,SoftConstraint : 
