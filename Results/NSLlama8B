% Instance Template
nurse(Nurse).

day(0.. N_days-1).

shift_type(Shift_type, Duration).

nurse_requirement(Shift_type, Min, Max).

work_requirement(Min, Max).

shift_requirement(Shift_type, Min, Max, Preferred).
%Correct

% Generator

% 
1 { assigned(Nurse, Shift, Day) : nurse(Nurse), shift_type(Shift), day(Day) } 1 :- nurse(Nurse), day(Day).
%Incorrect arity of shift_type. superfluous nurse and day within choice rule.

% Hard Constraints

% Every day, the number of nurses assigned to each shift must be between the specified minimum and maximum
:- shift_type(Shift_type, _), #count{Nurse : assigned(Nurse, Shift_type, _)}/2 < nurse_requirement(Shift_type, _, _).
:- shift_type(Shift_type, _), #count{Nurse : assigned(Nurse, Shift_type, _)}/2 > nurse_requirement(Shift_type, _, _).
%Wrong

% Each nurse must work at least the specified minimum and at most the specified maximum number of hours
:- nurse(Nurse), #sum{Hours, Day: assigned(Nurse, _, Hours), work_requirement(_, Min, Max)} < Min, work_requirement(_, Min, Max).
:- nurse(Nurse), #sum{Hours, Day: assigned(Nurse, _, Hours), work_requirement(_, Min, Max)} > Max, work_requirement(_, Min, Max).
%Wrong: day is anonymised.

% Nurses must have exactly 30 days of vacation.
:- #count{Day: assigned(_, _, Day), shift_type(_, vacation)} = 30.
%Wrong: Independent of nurse.

% If a nurse works a night shift, they can not work a morning or afternoon shift the next day
:- assigned(Nurse5, night, Day), assigned(Nurse, morning, Day+1).
:- assigned(Nurse, night, Day), assigned(Nurse, afternoon, Day+1).
%Correct

% If a nurse works an afternoon shift, they cannot work a morning shift the next day.
:- assigned(Nurse, afternoon, Day), assigned(Nurse, morning, Day+1).
%Correct

% Each nurse has at least two ordinary rest days for every window of fourteen days
:- #count{Day: assigned(Nurse, Shift, Day), shift_type(Shift, Duration), Duration = 1, Day mod 14 = 0} < 2, nurse(Nurse).
%Syntactically incorrect.


% Nurses working on two consecutive nights deserve one special_rest day in addition to the ordinary rest days
:- assigned(Nurse, night, Day1), assigned(Nurse, night, Day2), Day1 < Day2, assigned(Nurse, special_rest, Day2).
%Wrong: gives special_rest to any two consecutive shifts

% The total number of hours worked by each nurse must be between the specified minimum and maximum
:- nurse(Nurse), #sum{Hours, Day: assigned(Nurse, _, Hours), work_requirement(Min, Max)} > Max, work_requirement(Min, Max).
:- nurse(Nurse), #sum{Hours, Day: assigned(Nurse, _, Hours), work_requirement(Min, Max)} < Min, work_requirement(Min, Max).
%Wrong: Day is anonymized (syntax error)



% Soft Constraints

% Nurses work the preferred number of shifts for each shift type
shift_count(Count, Shift_type, Day) :- nurse(Nurse), day(Day), #count{Shift : assigned(Nurse, Shift, Day), shift_type(Shift, _)} = Count.
penalty("ShiftType",shift_count(Count, Shift_type, Day),(abs(Count-Preferred)-1)*1) :- shift_count(Count, Shift_type, Day), shift_requirement(Shift_type, Min, Max, Preferred), Count < Min or Count > Max.
%Wrongly counts the different kinds of shifts.



% Objective function
#minimize { Penalty,Reason,SoftConstraint : penalty(SoftConstraint,Reason,Penalty) }.
