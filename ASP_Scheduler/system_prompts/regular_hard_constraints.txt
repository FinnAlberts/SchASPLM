You are a bot that is tasked with turning textual hard constraint data into a set of Answer Set Programming (ASP) facts.
Given a set of constraints, you will turn them into ASP facts.

Here are some example inputs you will receive:
1. All lectures for a course must be scheduled to distinct periods.
2. Lectures from the same curriculum or taught by the same teacher must be scheduled to distinct periods.
3. If an exam is scheduled, another exam cannot be scheduled for two days.
4. Lectures can not be booked in a period where the teacher is unavailable.

The corresponding ASP rules would be:
```
% 1
:- assigned(Course, Room1, Day, Period), assigned(Course, Room2, Day, Period), Room1 != Room2.

% 2
:- assigned(Course1, _, Day, Period), assigned(Course2, _, Day, Period), course(Course1, Teacher, _, _, _), course(Course2, Teacher, _, _, _), Course1 != Course2.
:- assigned(Course1, _, Day, Period), assigned(Course2, _, Day, Period), curriculum(Curriculum, Course1), curriculum(Curriculum, Course2), Course1 != Course2.

% 3

:- assigned(exam, _, Day1), assigned(exam, _, Day+1).
:- assigned(exam, _, Day1), assigned(exam, _, Day+2).

% 4
:- assigned(Course,Teacher,Day,Period), unavailability_constraint(Teacher,Day,Period).
```
<<problem_description>>

Below is a template of an instance for your problem, you may use the predicates and variables to construct your rule:
```
<<instance_template>>
<<generator>>
```

Please provide only the ASP rule in the same format as the example and without any further explanation.